{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Smart-UJ UAQUE**\n",
        "Este Notebook hace parte del servicio inteligente \"Recomendaciones por temáticas para perfil grupal\" y tiene como principal objetivo generar los diccionarios correspondientes a los años de publicación, deweys y temáticas del material de la Biblioteca Alfonso Borrero Cabal S.J. \n",
        "\n",
        "Estos nos permitirán evitar este procesamiento al momento de ejecutar las recomendadciones.\n",
        "\n",
        "**Integrantes:**</br>\n",
        "Johan Ortegón </br>\n",
        "Juan Angarita </br>\n",
        "Jorge Salgado </br>\n",
        "Daniel Tibaquira </br></br>\n",
        "**Directora de Proyecto de Grado:** </br>\n",
        "Viky Arias </br>"
      ],
      "metadata": {
        "id": "ZC_ejfNT7KBD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Carga de datos"
      ],
      "metadata": {
        "id": "NcgcfDrl773O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importamos el módulo de drive donde se encuentran los archivos mediante los cuales construiremos los diccionarios"
      ],
      "metadata": {
        "id": "d-g34uo18BjX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# from google.colab import drive\n",
        "# drive.mount('/content/drive')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Mounted at /content/drive\n"
        }
      ],
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "executionInfo": {
          "elapsed": 99499,
          "status": "ok",
          "timestamp": 1631236322382,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "qonYFmBPj1_3",
        "outputId": "83b9e24a-59b3-4e6d-e682-4308de0d67e3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "id": "W6dwS-lnj70e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importamos el archivo que contiene los préstamos con sus respectivos pesos calculados"
      ],
      "metadata": {
        "id": "sssXdB-v8Y25"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Archivo donde se calcularon los pesos para cada prestamo\n",
        "df = pd.read_json('./data_to_build.json')\n",
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dewey</th>\n      <th>Llaves</th>\n      <th>ID de usuario ok</th>\n      <th>Peso del prestamos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1101</th>\n      <td>0</td>\n      <td>836405</td>\n      <td>0f655061dc0b588e221cd03bd3e7dfa056518ec3</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>1244</th>\n      <td>0</td>\n      <td>864918</td>\n      <td>95ae56fe5202b6a674123079b854aedee57f33d8</td>\n      <td>6.5</td>\n    </tr>\n    <tr>\n      <th>1699</th>\n      <td>0</td>\n      <td>918693</td>\n      <td>fed86974c1b264f8d7b6e36200c7ad5ca8ef5a90</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>1476</th>\n      <td>0</td>\n      <td>887648</td>\n      <td>1ef807d565bd7b4a210aec2d4f4433c0f66bcf8c</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>291</th>\n      <td>0</td>\n      <td>355238</td>\n      <td>53f6e0708e3ac4f0687c78f76906f682242e1687</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "     Dewey  Llaves                          ID de usuario ok  \\\n1101     0  836405  0f655061dc0b588e221cd03bd3e7dfa056518ec3   \n1244     0  864918  95ae56fe5202b6a674123079b854aedee57f33d8   \n1699     0  918693  fed86974c1b264f8d7b6e36200c7ad5ca8ef5a90   \n1476     0  887648  1ef807d565bd7b4a210aec2d4f4433c0f66bcf8c   \n291      0  355238  53f6e0708e3ac4f0687c78f76906f682242e1687   \n\n      Peso del prestamos  \n1101                13.0  \n1244                 6.5  \n1699                 6.0  \n1476                 5.0  \n291                  5.0  "
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "executionInfo": {
          "elapsed": 1759,
          "status": "ok",
          "timestamp": 1631203181708,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "VV0L22ATj97p",
        "outputId": "af6d13a3-a9e9-41df-be15-ebbaf236a77e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importamos el archivo que contiene los préstamos con la información correspondiente al material prestado"
      ],
      "metadata": {
        "id": "X09R_oXT8giP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Archivo donde se calcularon los pesos para cada prestamo\n",
        "df_prestamos = pd.read_json('./TABLA_JOIN.json')\n",
        "df_prestamos.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row ID</th>\n      <th>Mes</th>\n      <th>Fecha</th>\n      <th>Hora</th>\n      <th>Transacción</th>\n      <th>Biblioteca Transacción</th>\n      <th>ID Ítem</th>\n      <th>Numero de Ubicación</th>\n      <th>Dewey</th>\n      <th>Ubicación</th>\n      <th>...</th>\n      <th>ID de usuario ok</th>\n      <th>Año</th>\n      <th>Signatura</th>\n      <th>Tipo de ítem_y</th>\n      <th>Total de préstamos</th>\n      <th>Vol</th>\n      <th>Autor</th>\n      <th>Autor corporativo</th>\n      <th>Título</th>\n      <th>Año publicación</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Row0</td>\n      <td>Enero</td>\n      <td>1547050497000</td>\n      <td>16.0</td>\n      <td>Prestamos CyP</td>\n      <td>B-GENERAL</td>\n      <td>80000005327627</td>\n      <td>720.98 A71S</td>\n      <td>720</td>\n      <td>COL-GRAL-2</td>\n      <td>...</td>\n      <td>c361c772cd0220bb16dcfb2ad803e4903334ab94</td>\n      <td>2019</td>\n      <td>720.98 A71S|</td>\n      <td>LIBRO</td>\n      <td>83</td>\n      <td>1</td>\n      <td>Arango Cardinal, Silvia 1948-</td>\n      <td>None</td>\n      <td>Ciudad y arquitectura seis generaciones que co...</td>\n      <td>2012.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Row1</td>\n      <td>Enero</td>\n      <td>1547050500000</td>\n      <td>16.0</td>\n      <td>Prestamos CyP</td>\n      <td>B-GENERAL</td>\n      <td>80000001191496</td>\n      <td>720.9861 A71</td>\n      <td>720</td>\n      <td>COL-GRAL-2</td>\n      <td>...</td>\n      <td>c361c772cd0220bb16dcfb2ad803e4903334ab94</td>\n      <td>2019</td>\n      <td>720.9861 A71|</td>\n      <td>LIBRO</td>\n      <td>1186</td>\n      <td>1</td>\n      <td>Arango Cardinal, Silvia 1948-</td>\n      <td>None</td>\n      <td>Historia de la arquitectura en Colombia Silvia...</td>\n      <td>1993.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Row2</td>\n      <td>Enero</td>\n      <td>1547138763000</td>\n      <td>16.0</td>\n      <td>Prestamos CyP</td>\n      <td>B-GENERAL</td>\n      <td>80000004979759</td>\n      <td>540 CH15Q 2010</td>\n      <td>540</td>\n      <td>COL-GRAL-3</td>\n      <td>...</td>\n      <td>87b0e5a61ed712ddfaf5d478ad68c87c825997e9</td>\n      <td>2019</td>\n      <td>540 CH15Q 2010|</td>\n      <td>LIBRO</td>\n      <td>742</td>\n      <td>1</td>\n      <td>Chang, Raymond</td>\n      <td>None</td>\n      <td>Química Raymond Chang ; revisión técnica Rosa ...</td>\n      <td>2010.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Row3</td>\n      <td>Enero</td>\n      <td>1547138765000</td>\n      <td>16.0</td>\n      <td>Prestamos CyP</td>\n      <td>B-GENERAL</td>\n      <td>80000004509512</td>\n      <td>512 B151</td>\n      <td>510</td>\n      <td>COL-GRAL-3</td>\n      <td>...</td>\n      <td>87b0e5a61ed712ddfaf5d478ad68c87c825997e9</td>\n      <td>2019</td>\n      <td>512 B151|</td>\n      <td>LIBRO</td>\n      <td>215</td>\n      <td>1</td>\n      <td>Baldor, J. Aurelio</td>\n      <td>None</td>\n      <td>Álgebra con gráficos y 6523 ejercicios y probl...</td>\n      <td>2009.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Row4</td>\n      <td>Enero</td>\n      <td>1547300269000</td>\n      <td>13.0</td>\n      <td>Prestamos CyP</td>\n      <td>B-GENERAL</td>\n      <td>80000005270756</td>\n      <td>712 M17E</td>\n      <td>710</td>\n      <td>COL-GRAL-2</td>\n      <td>...</td>\n      <td>afe8c17ba351d274fc5671978918f0c93032d88f</td>\n      <td>2019</td>\n      <td>712 M17E|</td>\n      <td>LIBRO</td>\n      <td>41</td>\n      <td>1</td>\n      <td>Martínez de Pisón, Eduardo 1937-</td>\n      <td>None</td>\n      <td>Miradas sobre el paisaje Eduardo Martínez de P...</td>\n      <td>2009.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 26 columns</p>\n</div>",
            "text/plain": "  row ID    Mes          Fecha  Hora    Transacción Biblioteca Transacción  \\\n0   Row0  Enero  1547050497000  16.0  Prestamos CyP              B-GENERAL   \n1   Row1  Enero  1547050500000  16.0  Prestamos CyP              B-GENERAL   \n2   Row2  Enero  1547138763000  16.0  Prestamos CyP              B-GENERAL   \n3   Row3  Enero  1547138765000  16.0  Prestamos CyP              B-GENERAL   \n4   Row4  Enero  1547300269000  13.0  Prestamos CyP              B-GENERAL   \n\n          ID Ítem Numero de Ubicación Dewey   Ubicación  ...  \\\n0  80000005327627         720.98 A71S   720  COL-GRAL-2  ...   \n1  80000001191496        720.9861 A71   720  COL-GRAL-2  ...   \n2  80000004979759      540 CH15Q 2010   540  COL-GRAL-3  ...   \n3  80000004509512            512 B151   510  COL-GRAL-3  ...   \n4  80000005270756            712 M17E   710  COL-GRAL-2  ...   \n\n                           ID de usuario ok   Año        Signatura  \\\n0  c361c772cd0220bb16dcfb2ad803e4903334ab94  2019     720.98 A71S|   \n1  c361c772cd0220bb16dcfb2ad803e4903334ab94  2019    720.9861 A71|   \n2  87b0e5a61ed712ddfaf5d478ad68c87c825997e9  2019  540 CH15Q 2010|   \n3  87b0e5a61ed712ddfaf5d478ad68c87c825997e9  2019        512 B151|   \n4  afe8c17ba351d274fc5671978918f0c93032d88f  2019        712 M17E|   \n\n  Tipo de ítem_y Total de préstamos Vol                             Autor  \\\n0          LIBRO                 83   1     Arango Cardinal, Silvia 1948-   \n1          LIBRO               1186   1     Arango Cardinal, Silvia 1948-   \n2          LIBRO                742   1                    Chang, Raymond   \n3          LIBRO                215   1                Baldor, J. Aurelio   \n4          LIBRO                 41   1  Martínez de Pisón, Eduardo 1937-   \n\n   Autor corporativo                                             Título  \\\n0               None  Ciudad y arquitectura seis generaciones que co...   \n1               None  Historia de la arquitectura en Colombia Silvia...   \n2               None  Química Raymond Chang ; revisión técnica Rosa ...   \n3               None  Álgebra con gráficos y 6523 ejercicios y probl...   \n4               None  Miradas sobre el paisaje Eduardo Martínez de P...   \n\n  Año publicación  \n0          2012.0  \n1          1993.0  \n2          2010.0  \n3          2009.0  \n4          2009.0  \n\n[5 rows x 26 columns]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 625
        },
        "executionInfo": {
          "elapsed": 10781,
          "status": "ok",
          "timestamp": 1631203192480,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "oGvKyMEKkcs6",
        "outputId": "404aeaea-823d-409f-9886-cdf83ed24f1d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importamos el archivo que contiene los préstamos con las temáticas extraidas de la columna tema 650"
      ],
      "metadata": {
        "id": "68elekP18qh1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Archivo donde se calcularon los temas para cada material\n",
        "df_temas = pd.read_json('./Libros.json')\n",
        "df_temas.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID Ítem</th>\n      <th>Llaves</th>\n      <th>Vol</th>\n      <th>Autor</th>\n      <th>Título</th>\n      <th>Año publicación</th>\n      <th>Tema 670</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>25</th>\n      <td>80000001494817</td>\n      <td>260538</td>\n      <td>1</td>\n      <td>Gazaneo, Jorge O.</td>\n      <td>Tres asentamientos rurales por Jorge O. Gazane...</td>\n      <td>1965.0</td>\n      <td>[construcción, rural, colombia]</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>80000005551150</td>\n      <td>895665</td>\n      <td>1</td>\n      <td>Gómez Santander, Mónica Indira autora</td>\n      <td>La arquitectura como medio para la construcció...</td>\n      <td>2013.0</td>\n      <td>[arquitectura, sociedad]</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>80000004958129</td>\n      <td>821174</td>\n      <td>1</td>\n      <td>None</td>\n      <td>Aprendiendo a construir la arquitectura coordi...</td>\n      <td>2008.0</td>\n      <td>[arquitectura, diseño, plano]</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>80000001481400</td>\n      <td>323907</td>\n      <td>1</td>\n      <td>Banham, Reyner</td>\n      <td>Guia de la arquitectura moderna Reyner Banham</td>\n      <td>1979.0</td>\n      <td>[arquitectura, moderno, siglo, xx]</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>80000004845757</td>\n      <td>807089</td>\n      <td>1</td>\n      <td>Vegara Gómez, Alfonso 1955-</td>\n      <td>Territorios inteligentes Alfonso Vegara Gómez ...</td>\n      <td>2004.0</td>\n      <td>[desarrollo, urbano]</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "           ID Ítem  Llaves  Vol                                  Autor  \\\n25  80000001494817  260538    1                      Gazaneo, Jorge O.   \n41  80000005551150  895665    1  Gómez Santander, Mónica Indira autora   \n43  80000004958129  821174    1                                   None   \n44  80000001481400  323907    1                         Banham, Reyner   \n52  80000004845757  807089    1            Vegara Gómez, Alfonso 1955-   \n\n                                               Título  Año publicación  \\\n25  Tres asentamientos rurales por Jorge O. Gazane...           1965.0   \n41  La arquitectura como medio para la construcció...           2013.0   \n43  Aprendiendo a construir la arquitectura coordi...           2008.0   \n44      Guia de la arquitectura moderna Reyner Banham           1979.0   \n52  Territorios inteligentes Alfonso Vegara Gómez ...           2004.0   \n\n                              Tema 670  \n25     [construcción, rural, colombia]  \n41            [arquitectura, sociedad]  \n43       [arquitectura, diseño, plano]  \n44  [arquitectura, moderno, siglo, xx]  \n52                [desarrollo, urbano]  "
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "executionInfo": {
          "elapsed": 2263,
          "status": "ok",
          "timestamp": 1631236328216,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "sVDGhwd3k30Y",
        "outputId": "77833e85-3071-49d1-bfef-af6474109de4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Construyendo los diccionarios"
      ],
      "metadata": {
        "id": "0hMmIfy08ymN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "La funcionalidad que cumplirán estos es para que podamos evaluar la similitud de los ítems que se van a recomendar con respecto a los ítems que el usuario ya ha tomado en préstamos. Estos datos son estáticos por lo que no tiene sentido realiza el procesado de los mismos al momento de hacer las recomendaciones.\n",
        "\n",
        "Este procesamiento recomendamos que realice en los siguientes casos:\n",
        "\n",
        "\n",
        "*   Cuando se modifiquen los pesos para los préstamos\n",
        "*   Se modifique la información de las temáticas a las que se relacionan los ítems\n",
        "\n"
      ],
      "metadata": {
        "id": "srOfp5bi8442"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Años de publicación"
      ],
      "metadata": {
        "id": "qWP86L-T82QW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "import math\n",
        "from collections import defaultdict\n",
        "\n",
        "def getAllPublishedYearCalc():\n",
        "    \n",
        "    # Esta es la estructura que almacenará la información\n",
        "    # Será de tipo { \"llave\": \"valor\"}\n",
        "    # Donde la llave es el identificador \"Llaves \" de un í\btem\n",
        "    # Y el valor corresponde al año como entero para poder calcular la distancia\n",
        "    years = defaultdict(int)\n",
        "\n",
        "    # Iteramos sobre las llaves\n",
        "    filt = df['Llaves']\n",
        "    for llave in filt.unique():\n",
        "        itemID = float(llave)\n",
        "\n",
        "        # Buscamos el año de publicación para ítem actual\n",
        "        year = (df_prestamos.loc[df_prestamos['Llaves'] == llave]['Año publicación'].unique())[0]\n",
        "\n",
        "        if not math.isnan(year):\n",
        "            # Añadimos el dato al diccionario\n",
        "            years[itemID] = int(year)\n",
        "        else:\n",
        "            print(\"Llave que tiene año en nan\", llave)\n",
        "\n",
        "    return years\n",
        "\n",
        "# Alcenamos el diccionarios resultante en el archivo \"years.json\"\n",
        "with open('./years-1.json', 'w') as outfile:\n",
        "    json.dump(getAllPublishedYearCalc(), outfile)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Llave que tiene año en nan 626605\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "executionInfo": {
          "elapsed": 74131,
          "status": "ok",
          "timestamp": 1631157788593,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "YdK8TanokTCK",
        "outputId": "77cc2734-2245-4313-cd72-29d0dec0a2dd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Deweys"
      ],
      "metadata": {
        "id": "PLFBE5HP-lrX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "from collections import defaultdict\n",
        "\n",
        "def getAllDeweysCalc():\n",
        "\n",
        "    # Esta es la estructura que almacenará la información\n",
        "    # Será de tipo { \"llave\": \"valor\"}\n",
        "    # Donde la llave es el identificador \"Llaves \" de un í\btem\n",
        "    # Y el valor corresponde a la lista \"encoded\" de los deweys a los que pertenece un libro\n",
        "    # Aunque los deweys son valores numéricos (en su mayoría) sería un error \n",
        "    # Calcular la distancia con repecto a tal número pues no nos generar una verdadera\n",
        "    # Relación con respecto a los ítems\n",
        "    genres = defaultdict(list)\n",
        "\n",
        "    genreIDs = {}\n",
        "    maxGenreID = 0\n",
        "    filt = df['Llaves'].unique()\n",
        "\n",
        "    # Iteramos sobre las llaves\n",
        "    for llave in filt:\n",
        "        itemID = str(llave)\n",
        "\n",
        "        # Buscamos el dewey para ítem actual\n",
        "        genreList = [(df_prestamos.loc[df_prestamos['Llaves'] == llave]['Dewey'].unique())[0]]\n",
        "\n",
        "        genreIDList = []\n",
        "\n",
        "        for genre in genreList:\n",
        "            if genre in genreIDs:\n",
        "                genreID = genreIDs[genre]\n",
        "            else:\n",
        "                genreID = maxGenreID\n",
        "                genreIDs[genre] = genreID\n",
        "                maxGenreID += 1\n",
        "            \n",
        "            # El arreglo genreIDList incluye todos los deweys para todos los materiales\n",
        "            genreIDList.append(genreID)\n",
        "        genres[itemID] = genreIDList\n",
        "\n",
        "    # Convertimos la lista de dewey a un vector bitfield para poder tratarlo como vector y\n",
        "    # Calcular la distancia entre ítems\n",
        "    for (itemID, genreIDList) in genres.items():\n",
        "        bitfield = [0] * maxGenreID\n",
        "        for genreID in genreIDList:\n",
        "            bitfield[genreID] = 1\n",
        "        genres[itemID] = bitfield            \n",
        "    \n",
        "    return genres\n",
        "\n",
        "# Alcenamos el diccionarios resultante en el archivo \"deweys.json\"\n",
        "with open('./deweys-1.json', 'w') as outfile:\n",
        "    json.dump(getAllDeweysCalc(), outfile)"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "id": "AHt_t6-1SZNF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Temáticas"
      ],
      "metadata": {
        "id": "5qIwIz0yACWN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "from collections import defaultdict\n",
        "\n",
        "def getAllGenresCalc():\n",
        "\n",
        "    # Esta es la estructura que almacenará la información\n",
        "    # Será de tipo { \"llave\": \"valor\"}\n",
        "    # Donde la llave es el identificador \"Llaves \" de un í\btem\n",
        "    # Y el valor corresponde a la lista \"encoded\" de las temáticas identificadas para cada libro\n",
        "    genres = defaultdict(list)\n",
        "\n",
        "    genreIDs = {}\n",
        "    maxGenreID = 0\n",
        "    filt = df_temas['Llaves'].unique()\n",
        "\n",
        "    # Iteramos sobre las llaves\n",
        "    for llave in filt:\n",
        "        itemID = str(llave)\n",
        "\n",
        "         # Buscamos las temáticas para el ítem actual\n",
        "        genreList = (df_temas.loc[df_temas['Llaves'] == str(llave)]['Tema 670']).to_list()[0]\n",
        "\n",
        "        genreIDList = []\n",
        "        \n",
        "        # Iteramos sobre cada temática del ítem\n",
        "        for genre in genreList:\n",
        "            if genre in genreIDs:\n",
        "                genreID = genreIDs[genre]\n",
        "            else:\n",
        "                genreID = maxGenreID\n",
        "                genreIDs[genre] = genreID\n",
        "                maxGenreID += 1\n",
        "            genreIDList.append(genreID)\n",
        "\n",
        "        # Agregamos el ítem a la lista de ids para poder hacer el encoding\n",
        "        genres[itemID] = genreIDList\n",
        "\n",
        "    # Convertimos la lista de temáticas a un vector bitfield para poder tratarlo como vector y\n",
        "    # Calcular la distancia entre ítems\n",
        "    for (itemID, genreIDList) in genres.items():\n",
        "        bitfield = [0] * maxGenreID\n",
        "        for genreID in genreIDList:\n",
        "            bitfield[genreID] = 1\n",
        "        genres[itemID] = bitfield          \n",
        "    \n",
        "    return genres\n",
        "\n",
        "# Alcenamos el diccionarios resultante en el archivo \"themes.json\"\n",
        "with open('./themes-1.json', 'w') as outfile:\n",
        "    json.dump(getAllGenresCalc(), outfile)"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 218
        },
        "executionInfo": {
          "elapsed": 229,
          "status": "error",
          "timestamp": 1631399739972,
          "user": {
            "displayName": "Daniel Tibaquira",
            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gj_hZUg1m9LeLQwBq4WOlx9a8aogZwxWo0xpAdZ6g=s64",
            "userId": "07934439656358572853"
          },
          "user_tz": 300
        },
        "id": "xSvu2uTEQwE8",
        "outputId": "bfc26157-8517-48ce-cc9d-8e0b4f93c8e8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para obtener el diccionario de temáticas\n",
        "import json\n",
        "from collections import defaultdict\n",
        "\n",
        "def getAllThemes():\n",
        "    with open('./themes-1.json') as json_file:\n",
        "        data = json.load(json_file)\n",
        "    return defaultdict(list, data)\n",
        "\n",
        "genres = getAllThemes()"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "genres['204751']"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "[]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "df_temas.loc[df_temas['Llaves'] == 204751]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID Ítem</th>\n      <th>Llaves</th>\n      <th>Vol</th>\n      <th>Autor</th>\n      <th>Título</th>\n      <th>Año publicación</th>\n      <th>Tema 670</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>",
            "text/plain": "Empty DataFrame\nColumns: [ID Ítem, Llaves, Vol, Autor, Título, Año publicación, Tema 670]\nIndex: []"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "colab": {
      "authorship_tag": "ABX9TyPqQHYY+GXu0RbT6xg5i0EK",
      "name": "Export DF Features.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}